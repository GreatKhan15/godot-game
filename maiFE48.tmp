[gd_scene load_steps=16 format=3 uid="uid://tt2of2ejfpqe"]

[ext_resource type="Script" path="res://CSGSphere3D.gd" id="1_rnfcv"]
[ext_resource type="Texture2D" uid="uid://bdwqntoidtvs0" path="res://Mats/PavingStones146_1K-JPG/PavingStones146_1K-JPG_Color.jpg" id="2_thkkd"]
[ext_resource type="Texture2D" uid="uid://casyrsv6fna3n" path="res://Mats/golden_gate_hills_4k.exr" id="3_o04to"]
[ext_resource type="Script" path="res://Node3D.gd" id="4_qgdw0"]

[sub_resource type="GDScript" id="GDScript_v1jfx"]
script/source = "extends CharacterBody3D

var SPEED = 5.0
const JUMP_VELOCITY = 5.0
const BOUNCE_FORCE_UP = 5.0  # The bounce force when the player hits a wall
const LEAP_FORCE = 50  # The bounce force when the player hits a wall

var mouse_sensitivity : float = 0.0001

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

# Camera reference
@onready var camera = $CSGSphere3D/Camera3D

# Flag to track if the player is in the air or not
var is_jumping = false

# Smooth interpolation factor
var interpolation_speed = 4.0  # The speed at which the velocity interpolates towards the target velocity
var interpolation_speed_air = 1.0  # The speed at which the velocity interpolates towards the target velocity
var target_velocity = Vector3.ZERO  # The target velocity (input direction * speed)

# Called when the node enters the scene tree for the first time.
func _ready():
	# Set the cursor to hidden for mouse look
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED

func _physics_process(delta):
	# Check for Escape key to release the mouse capture
	if Input.is_action_just_pressed(\"ui_cancel\"):  # Escape button
		get_tree().quit()


	# Handle jump (spacebar) - trigger on press and reset on release
	if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor() and not is_jumping:
		velocity.y = JUMP_VELOCITY
		is_jumping = true  # Set jumping to true after jump

	# Handle sprinting (Shift to go faster)
	if Input.is_key_pressed(KEY_CTRL):
		SPEED = 10
	else:
		SPEED = 5
	
	if Input.is_mouse_button_pressed(MOUSE_BUTTON_RIGHT):
		if Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT):
			velocity = -camera.global_transform.basis.z * LEAP_FORCE
	elif Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT):
			fire_laser()
	
	# Handle movement with WASD input (or arrows)
	var input_dir = Input.get_vector(\"ui_left\", \"ui_right\", \"ui_up\", \"ui_down\")
	var direction = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()

	# Set the target velocity based on the direction
	if direction:
		target_velocity.x = direction.x * SPEED
		target_velocity.z = direction.z * SPEED
	else:
		# Apply deceleration when no movement input is given
		target_velocity.x = move_toward(target_velocity.x, 0, interpolation_speed/3)
		target_velocity.z = move_toward(target_velocity.z, 0, interpolation_speed/3)

	# Interpolate the current velocity towards the target velocity
	
	# Add gravity if the player is not on the floor
	if not is_on_floor():
		velocity.y -= gravity * delta
		is_jumping = true  # The player is now in the air (jumping or falling)
		velocity.x = lerp(velocity.x, target_velocity.x, interpolation_speed_air * delta)
		velocity.z = lerp(velocity.z, target_velocity.z, interpolation_speed_air * delta)
	else:
		is_jumping = false
		velocity.x = lerp(velocity.x, target_velocity.x, interpolation_speed * delta)
		velocity.z = lerp(velocity.z, target_velocity.z, interpolation_speed * delta)
		

	# Detect if the player is colliding with any object
	if is_colliding():
		# Check if Space is pressed to trigger a bounce off the collision object
		if Input.is_action_just_pressed(\"ui_accept\"):
			apply_bounce()

	# Move the character and slide based on velocity
	move_and_slide()

	# Handle mouse look for camera movement (horizontal rotation)
	var mouse_movement : Vector2 = Input.get_last_mouse_velocity()

	# Horizontal rotation (Y-axis) for the camera
	rotate_y(-mouse_movement.x * mouse_sensitivity)

# Check if the player is colliding with an object
func is_colliding() -> bool:
	# Use `get_slide_collision` to check if the character is colliding
	for i in range(get_slide_collision_count()):
		var collision = get_slide_collision(i)
		if collision:  # If a collider exists
			# You can check the object name or group here if needed
			return true
	return false

# Apply a bouncing effect to the player's velocity when colliding with an object
func apply_bounce():
	# Apply a vertical force to simulate a bounce (you can adjust the strength)
	velocity.y = BOUNCE_FORCE_UP  # Apply upward force on bounce

	# Optional: Reduce horizontal velocity to make it less \"slippery\" after bouncing
	velocity.x = velocity.x + (-get_collision_vector().x * 50)  # Reduce horizontal speed on X axis after bounce
	velocity.z = velocity.z + (-get_collision_vector().z * 50) # Reduce horizontal speed on Z axis after bounce

# Get the vector from the player to the colliding object
func get_collision_vector() -> Vector3:
	for i in range(get_slide_collision_count()):
		var collision = get_slide_collision(i)
		if collision:
			# Get the point of contact with the colliding object
			var collision_point = collision.get_position()
			# Calculate the vector from the player to the collision point
			var collision_vector = collision_point - global_position

			return collision_vector
	return Vector3.ZERO  # Return zero vector if no collision


func fire_laser():
	# Create the laser node (Node3D)
	var laser = Node3D.new()
	
	# Create the cylinder mesh for the laser
	var laser_mesh = MeshInstance3D.new()
	var cylinder = CylinderMesh.new()
	cylinder.radius = 0.1  # Radius of the cylinder (adjust as needed)
	cylinder.height = 2.0  # Length of the laser (adjust as needed)
	laser_mesh.mesh = cylinder
	laser.add_child(laser_mesh)  # Add the mesh to the laser node

	# Create the particle system for the laser
	var particle_system = CPUParticles3D.new()
	particle_system.emitting = true
	laser.add_child(particle_system)  # Add the particle system to the laser node

	# Create a simple ShaderMaterial to control particle color and behavior
	var shader_material = ShaderMaterial.new()
	var shader = Shader.new()
	shader.code = \"\"\"
		shader_type particles;

		void fragment() {
			COLOR = vec4(1.0, 0.0, 0.0, 1.0);  // Red color for laser particles
		}
	\"\"\"
	shader_material.shader = shader
	particle_system.process_material = shader_material

	# Particle system properties
	particle_system.lifetime = 1.0  # Lifetime of each particle
	particle_system.initial_velocity = 50.0  # Speed of particles
	particle_system.gravity = Vector3.ZERO  # No gravity effect on particles
	particle_system.direction = Vector3(0, 0, -1)  # Particles move forward with the laser

	# Position the laser in front of the camera
	laser.global_transform.origin = camera.global_transform.origin + camera.global_transform.basis.z * 2.0  # 2 units in front of the camera

	# Add the laser node to the scene
	add_child(laser)
"

[sub_resource type="SphereShape3D" id="SphereShape3D_43ctv"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_gfkv8"]
albedo_color = Color(0.690196, 0.105882, 0, 1)
metallic = 1.0
metallic_specular = 0.9
emission_enabled = true
emission = Color(0.929412, 1, 0.486275, 1)
emission_energy_multiplier = 4.15

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_doioi"]
transparency = 1
albedo_color = Color(0.909804, 0.905882, 0, 0.239216)
emission_enabled = true
emission = Color(0.878431, 0, 0, 1)
emission_energy_multiplier = 1.34

[sub_resource type="SphereMesh" id="SphereMesh_fn1gr"]
material = SubResource("StandardMaterial3D_doioi")
radius = 0.004
height = 0.01
rings = 2

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_4eiq8"]
specular_mode = 1
albedo_texture = ExtResource("2_thkkd")
emission = Color(0, 0.309804, 0, 1)
uv1_scale = Vector3(40, 40, 40)

[sub_resource type="BoxShape3D" id="BoxShape3D_3p5rk"]

[sub_resource type="PanoramaSkyMaterial" id="PanoramaSkyMaterial_cpebo"]
panorama = ExtResource("3_o04to")

[sub_resource type="Sky" id="Sky_kahkq"]
sky_material = SubResource("PanoramaSkyMaterial_cpebo")

[sub_resource type="Environment" id="Environment_qdd02"]
background_mode = 2
background_energy_multiplier = 0.4
sky = SubResource("Sky_kahkq")
glow_enabled = true
glow_intensity = 0.65
fog_light_color = Color(0.847059, 0.847059, 0.92549, 1)
fog_light_energy = 0.73
fog_density = 0.039
fog_height = 3.0
volumetric_fog_density = 0.0605
volumetric_fog_albedo = Color(0.87451, 0.623529, 0.168627, 1)
volumetric_fog_emission = Color(0.858824, 0.807843, 0.933333, 1)
volumetric_fog_length = 7.16

[sub_resource type="GDScript" id="GDScript_6obk7"]
resource_name = "ControlScript"
script/source = "extends Control

func _ready():
	anchor_left = 0.0
	anchor_top = 0.0
	anchor_right = 1.0
	anchor_bottom = 1.0

	offset_left = 0.0
	offset_top = 0.0
	offset_right = 0.0
	offset_bottom = 0.0

	queue_redraw()

func _process(_delta):
	queue_redraw()

func _draw():
	var center = get_size() / 2
	var line_length = 10
	var line_color = Color.WHITE
	var thickness = 2

	# Horizontal line
	if( Input.is_mouse_button_pressed(MOUSE_BUTTON_RIGHT)):
		draw_line(
			center - Vector2(line_length, 0),
			center + Vector2(line_length, 0),
			line_color,
			thickness
		)

		# Vertical line
		draw_line(
			center - Vector2(0, line_length),
			center + Vector2(0, line_length),
			line_color,
			thickness
		)
"

[node name="Main scene" type="Node3D"]

[node name="CharacterBody3D" type="CharacterBody3D" parent="."]
transform = Transform3D(-0.912641, 0, -0.408761, 0, 1, 0, 0.408761, 0, -0.912641, -2.69452, 0.716496, -0.934242)
script = SubResource("GDScript_v1jfx")

[node name="CollisionShape3D" type="CollisionShape3D" parent="CharacterBody3D"]
transform = Transform3D(0.415, 0, 1.49012e-08, 0, 0.415, 0, -1.49012e-08, 0, 0.415, 0, 0, 0)
shape = SubResource("SphereShape3D_43ctv")

[node name="CSGSphere3D" type="CSGSphere3D" parent="CharacterBody3D"]
transform = Transform3D(0.419486, 0, 1.49012e-07, 0, 0.419486, 0, -1.49012e-07, 0, 0.419486, 0, 0, 0)
material = SubResource("StandardMaterial3D_gfkv8")
script = ExtResource("1_rnfcv")

[node name="Camera3D" type="Camera3D" parent="CharacterBody3D/CSGSphere3D"]
transform = Transform3D(2.8169, 0, -1.19209e-07, 0, 2.8169, 0, 1.19209e-07, 0, 2.8169, -0.128479, 0.715462, 5.01149)
fov = 85.0

[node name="CPUParticles3D" type="CPUParticles3D" parent="CharacterBody3D/CSGSphere3D"]
transform = Transform3D(1, 0, -2.98023e-08, 0, 1, 0, 2.98023e-08, 0, 1, 0, 0, 0)
amount = 218
mesh = SubResource("SphereMesh_fn1gr")
emission_shape = 1
emission_sphere_radius = 1.11
spread = 117.18
gravity = Vector3(0, 1, 0)
scale_amount_max = 6.9
anim_speed_max = 1.5
anim_offset_max = 0.073

[node name="StaticBody3D" type="StaticBody3D" parent="."]
transform = Transform3D(48.955, -1.55742e-06, -0.0115311, 0.0108965, 0.007, 0.0180602, 0.0119722, -2.6825e-06, 47.135, 10.785, 0, 14.7108)

[node name="CSGBox3D" type="CSGBox3D" parent="StaticBody3D"]
transform = Transform3D(12.5173, -5.59188e-15, 2.32831e-10, 7.08457e-06, 0.993026, 1.14441e-05, 4.65661e-10, 3.90799e-14, 12.5117, 5.30429, -20.421, 4.71471)
use_collision = true
material = SubResource("StandardMaterial3D_4eiq8")

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, -4.64039e-16, 2.91038e-11, 3.09083e-07, 1, 0, 2.91038e-11, 7.10543e-15, 1, 0, 0, 0)
shape = SubResource("BoxShape3D_3p5rk")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_qdd02")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.857802, -0.486859, -0.164755, 0.34151, 0.300326, 0.890604, -0.384119, -0.820227, 0.423887, -12.1117, 9.423, 0)
light_color = Color(0.882353, 0.831373, 0.952941, 1)
light_energy = 0.395
shadow_enabled = true

[node name="Node3D" type="Node3D" parent="."]
script = ExtResource("4_qgdw0")
texture = ExtResource("2_thkkd")

[node name="Control" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
script = SubResource("GDScript_6obk7")
